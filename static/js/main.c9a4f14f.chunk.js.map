{"version":3,"sources":["containers/Login.js","containers/Clients.js","components/PrivateRoute.js","App.js","serviceWorker.js","index.js"],"names":["Login","state","loggedIn","localStorage","getItem","onSubmit","_callee","event","response","token","regenerator_default","a","wrap","_context","prev","next","preventDefault","fetch","concat","process","method","headers","Content-Type","body","JSON","stringify","username","target","elements","value","password","sent","text","setItem","_this","setState","stop","this","react_default","createElement","react_router","to","type","name","Component","Clients","clients","componentDidMount","Authorization","json","t0","removeItem","console","error","render","map","client","key","id","PrivateRoute","Object","assign","props","component","Komponent","App","onClick","e","react_router_dom","basename","href","path","exact","PrivateRoute_PrivateRoute","React","Boolean","window","location","hostname","match","ReactDOM","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kRAGqBA,6MAEnBC,MAAQ,CACNC,WAAYC,aAAaC,QAAQ,YAGnCC,+CAAW,SAAAC,EAAOC,GAAP,IAAAC,EAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACTR,EAAMS,iBADGH,EAAAE,KAAA,EAEcE,MAAK,GAAAC,OAAIC,4CAAJ,cAA2C,CACrEC,OAAQ,OACRC,QAAS,CACPC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,SAAUnB,EAAMoB,OAAOC,SAASF,SAASG,MACzCC,SAAUvB,EAAMoB,OAAOC,SAASE,SAASD,UATpC,cAEHrB,EAFGK,EAAAkB,KAAAlB,EAAAE,KAAA,EAYWP,EAASwB,OAZpB,OAYHvB,EAZGI,EAAAkB,KAaT5B,aAAa8B,QAAQ,QAASxB,GAC9ByB,EAAKC,SAAS,CAAEjC,UAAU,IAdjB,wBAAAW,EAAAuB,SAAA9B,oIAkBT,OAAI+B,KAAKpC,MAAMC,SACNoC,EAAA3B,EAAA4B,cAACC,EAAA,EAAD,CAAUC,GAAG,aAGpBH,EAAA3B,EAAA4B,cAAA,QAAMlC,SAAUgC,KAAKhC,UACnBiC,EAAA3B,EAAA4B,cAAA,wBAEED,EAAA3B,EAAA4B,cAAA,SAAOG,KAAK,OAAOC,KAAK,cAE1BL,EAAA3B,EAAA4B,cAAA,wBAEED,EAAA3B,EAAA4B,cAAA,SAAOG,KAAK,WAAWC,KAAK,cAE9BL,EAAA3B,EAAA4B,cAAA,SAAOG,KAAK,mBArCeE,aCDdC,6MACnB5C,MAAQ,CACN6C,QAAS,MAGXC,uCAAoB,SAAAzC,IAAA,IAAAE,EAAAsC,EAAA,OAAApC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEOE,MAAK,GAAAC,OAAIC,4CAAJ,gBAA6C,CACvEE,QAAS,CACP2B,cAAA,UAAA9B,OAA2Bf,aAAaC,QAAQ,aAJpC,cAEVI,EAFUK,EAAAkB,KAAAlB,EAAAE,KAAA,EAOMP,EAASyC,OAPf,OAOVH,EAPUjC,EAAAkB,KAQhBG,EAAKC,SAAS,CACZW,QAASA,IATKjC,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAqC,GAAArC,EAAA,SAYhBV,aAAagD,WAAW,SACxBjB,EAAKC,SAAS,CAAEW,QAAS,KACzBM,QAAQC,MAARxC,EAAAqC,IAdgB,yBAAArC,EAAAuB,SAAA9B,EAAA,oBAkBpBgD,OAAS,WACP,OACEhB,EAAA3B,EAAA4B,cAAA,UACGL,EAAKjC,MAAM6C,QAAQS,IAAI,SAAAC,GAAM,OAAIlB,EAAA3B,EAAA4B,cAAA,MAAIkB,IAAKD,EAAOE,IAAKF,EAAOb,uCA1BjCC,aCChBe,mLACV,IAAAzB,EAAAG,KACP,OACEC,EAAA3B,EAAA4B,cAACC,EAAA,EAADoB,OAAAC,OAAA,GAAWxB,KAAKyB,MAAhB,CAAuBC,UAAW,WAChC,IAAK5D,aAAaC,QAAQ,SACxB,OAAOkC,EAAA3B,EAAA4B,cAACC,EAAA,EAAD,CAAUC,GAAG,WAEtB,IAAMuB,EAAY9B,EAAK4B,MAAMC,UAC7B,OAAOzB,EAAA3B,EAAA4B,cAACyB,EAAc9B,EAAK4B,kBAROlB,aCGrBqB,6MAEnBhE,MAAQ,CACNC,WAAYC,aAAaC,QAAQ,YAGnC8D,QAAU,SAACC,GACTA,EAAEnD,iBACFb,aAAagD,WAAW,SACxBjB,EAAKC,SAAS,CAAEjC,UAAU,OAG5BoD,OAAS,WACP,OACEhB,EAAA3B,EAAA4B,cAAC6B,EAAA,EAAD,CAAQC,SAAU,mBAChB/B,EAAA3B,EAAA4B,cAAA,WACED,EAAA3B,EAAA4B,cAAA,WACED,EAAA3B,EAAA4B,cAAA,UACED,EAAA3B,EAAA4B,cAAA,UACED,EAAA3B,EAAA4B,cAAC6B,EAAA,EAAD,CAAM3B,GAAG,UAAT,UAEFH,EAAA3B,EAAA4B,cAAA,UACED,EAAA3B,EAAA4B,cAAC6B,EAAA,EAAD,CAAM3B,GAAG,YAAT,YAKFH,EAAA3B,EAAA4B,cAAA,UACED,EAAA3B,EAAA4B,cAAA,KAAG+B,KAAK,UAAUJ,QAAShC,EAAKgC,SAAhC,aAKN5B,EAAA3B,EAAA4B,cAACC,EAAA,EAAD,CAAO+B,KAAK,IAAIC,OAAK,EAACT,UAAW/D,IACjCsC,EAAA3B,EAAA4B,cAACC,EAAA,EAAD,CAAO+B,KAAK,SAASR,UAAW/D,IAChCsC,EAAA3B,EAAA4B,cAACkC,EAAD,CAAcF,KAAK,WAAWR,UAAWlB,oCAnClB6B,IAAM9B,WCMnB+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAS1B,OAAOhB,EAAA3B,EAAA4B,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c9a4f14f.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom';\n\nexport default class Login extends Component {\n\n  state = {\n    loggedIn: !!localStorage.getItem('token')\n  }\n\n  onSubmit = async (event) => {\n    event.preventDefault();\n    const response = await fetch(`${process.env.REACT_APP_API}/api/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: event.target.elements.username.value,\n        password: event.target.elements.password.value\n      })\n    });\n    const token = await response.text();\n    localStorage.setItem('token', token);\n    this.setState({ loggedIn: true });\n  }\n\n  render() {\n    if (this.state.loggedIn) {\n      return <Redirect to='/clients' />\n    }\n    return (\n      <form onSubmit={this.onSubmit}>\n        <label>\n          Username\n          <input type=\"text\" name=\"username\" />\n        </label>\n        <label>\n          Password\n          <input type=\"password\" name=\"password\" />\n        </label>\n        <input type=\"Submit\" />\n      </form>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class Clients extends Component {\n  state = {\n    clients: []\n  }\n\n  componentDidMount = async () => {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API}/api/clients`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      const clients = await response.json();\n      this.setState({\n        clients: clients\n      });\n    } catch (error) {\n      localStorage.removeItem('token');\n      this.setState({ clients: [] });\n      console.error(error)\n    }\n  }\n\n  render = () => {\n    return (\n      <ul>\n        {this.state.clients.map(client => <li key={client.id}>{client.name}</li>)}\n      </ul>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { Route, Redirect } from \"react-router-dom\";\n\nexport default class PrivateRoute extends Component {\n  render() {\n    return (\n      <Route {...this.props} component={() => {\n        if (!localStorage.getItem('token')) {\n          return <Redirect to=\"/login\" />;\n        }\n        const Komponent = this.props.component;\n        return <Komponent {...this.props} />\n      }} />\n    )\n  }\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport Login from './containers/Login';\nimport Clients from './containers/Clients';\nimport PrivateRoute from './components/PrivateRoute';\n\nexport default class App extends React.Component {\n\n  state = {\n    loggedIn: !!localStorage.getItem('token')\n  }\n\n  onClick = (e) => {\n    e.preventDefault();\n    localStorage.removeItem('token');\n    this.setState({ loggedIn: false });\n  }\n\n  render = () => {\n    return (\n      <Router basename={'/clients-auth-2'}>\n        <div>\n          <nav>\n            <ul>\n              <li>\n                <Link to=\"/login\">login</Link>\n              </li>\n              <li>\n                <Link to=\"/clients\">Clients</Link>\n              </li>\n              {/* <li>\n                <Link to=\"/pets\">pets</Link>\n              </li> */}\n              <li>\n                <a href=\"#logout\" onClick={this.onClick}>Logout</a>\n              </li>\n            </ul>\n          </nav>\n\n          <Route path=\"/\" exact component={Login} />\n          <Route path=\"/login\" component={Login} />\n          <PrivateRoute path=\"/clients\" component={Clients} />\n          {/* <Route path=\"/pets\" component={Pets} /> */}\n        </div>\n      </Router>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}